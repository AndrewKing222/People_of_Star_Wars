{"version":3,"sources":["components/PersonItem.tsx","components/PersonDetails.styles.ts","components/PersonDetails.tsx","components/PeopleList.tsx","components/PeopleSearch.tsx","components/Pagination.tsx","components/Search.tsx","App.styles.ts","App.tsx","cache.ts","index.tsx"],"names":["Item","styled","div","ItemName","PersonItem","name","onClick","activeItem","className","Wrapper","PERSON_DETAILS","gql","PersonDetails","id","useQuery","variables","loading","error","data","role","console","log","personDetails","height","mass","gender","homeworld","PEOPLE_LIST","getPersonID","personURL","splitPersonURL","split","parseInt","length","PeopleList","page","useState","showDetails","setShowDetails","peoplePage","map","person","url","PEOPLE_SEARCH","PeopleSearch","search","peopleSearch","PageSelect","Pagination","setSelectedPage","onPageChange","Search","setSearchInput","type","placeholder","aria-label","onChange","e","target","value","GlobalStyle","createGlobalStyle","Title","h1","App","selectedPage","searchInput","cache","InMemoryCache","client","ApolloClient","uri","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6ac719b4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Item = styled.div`\r\n  :hover {\r\n    color: #fff;\r\n    opacity: 0.8;\r\n  }\r\n  h5 {\r\n    margin: 0px;\r\n  }\r\n`;\r\n\r\nconst ItemName = styled.div`\r\n  color: #ffe81f;\r\n`;\r\n\r\ninterface PersonItemProps {\r\n  name: string;\r\n  onClick: () => void;\r\n  activeItem?: string;\r\n}\r\n\r\nexport const PersonItem: React.FC<PersonItemProps> = ({\r\n  name,\r\n  onClick,\r\n  activeItem,\r\n}) => {\r\n  return (\r\n    <Item>\r\n      <div onClick={onClick} className=\"card card-body mt-1 py-2\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-9\">\r\n            {activeItem === name ? (\r\n              <ItemName>\r\n                <h5>{name}</h5>\r\n              </ItemName>\r\n            ) : (\r\n              <h5>{name}</h5>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Item>\r\n  );\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  color: #000;\r\n  font-size: 16px;\r\n  background: #b4b4b4;\r\n  border-radius: 0px 0px 10px 10px;\r\n  padding: 20px 40px 10px;\r\n  margin: 0px 10px;\r\n`;\r\n","import React from \"react\";\r\nimport { gql, useQuery } from \"@apollo/client\";\r\nimport { Wrapper } from \"./PersonDetails.styles\";\r\n\r\nconst PERSON_DETAILS = gql`\r\n  query PersonDetails($id: Int!) {\r\n    personDetails(id: $id) {\r\n      height\r\n      mass\r\n      gender\r\n      homeworld {\r\n        name\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\ninterface PersonDetailsProps {\r\n  //   person: {\r\n  //     height: String;\r\n  //     mass: String;\r\n  //     gender: String;\r\n  //   };\r\n  //   homeworld: Planet;\r\n  // }\r\n  // interface Planet {\r\n  //   name: String;\r\n  id: number;\r\n}\r\n\r\nexport const PersonDetails: React.FC<PersonDetailsProps> = ({ id }) =>\r\n  // {\r\n  //   person: { height, mass, gender },\r\n  //   homeworld,\r\n  // }\r\n  {\r\n    const { loading, error, data } = useQuery<any>(PERSON_DETAILS, {\r\n      variables: { id },\r\n    });\r\n\r\n    if (loading)\r\n      return (\r\n        <div className=\"d-flex justify-content-center mb-3\">\r\n          <div className=\"spinner-border\" role=\"status\"></div>\r\n        </div>\r\n      );\r\n    if (error) {\r\n      console.log(error);\r\n      return <h5>ERROR</h5>;\r\n    }\r\n    if (!data) return <h4>No details found</h4>;\r\n\r\n    const { height, mass, gender, homeworld } = data.personDetails;\r\n\r\n    return (\r\n      <Wrapper>\r\n        <div className=\"col\">\r\n          <p>Height: {height} cm</p>\r\n          <p>Mass: {mass} kg</p>\r\n          <p>Gender: {gender}</p>\r\n          <p>Homeworld: {homeworld.name}</p>\r\n        </div>\r\n      </Wrapper>\r\n    );\r\n  };\r\n","import React, { Fragment, useState } from \"react\";\r\nimport { gql, useQuery } from \"@apollo/client\";\r\nimport { PersonItem } from \"./PersonItem\";\r\nimport { PersonDetails } from \"./PersonDetails\";\r\n\r\nconst PEOPLE_LIST = gql`\r\n  query PeopleList($page: Int!) {\r\n    peoplePage(page: $page) {\r\n      url\r\n      name\r\n      # height\r\n      # mass\r\n      # gender\r\n      # homeworld {\r\n      #   name\r\n      # }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getPersonID = (personURL: String) => {\r\n  let splitPersonURL = personURL.split(\"/\");\r\n  return parseInt(splitPersonURL[splitPersonURL.length - 2]);\r\n};\r\n\r\ninterface PeopleListProps {\r\n  page: number;\r\n}\r\n\r\nexport const PeopleList: React.FC<PeopleListProps> = ({ page }) => {\r\n  const [showDetails, setShowDetails] = useState();\r\n\r\n  const { loading, error, data } = useQuery<any>(PEOPLE_LIST, {\r\n    variables: { page },\r\n  });\r\n\r\n  if (loading)\r\n    return (\r\n      <div className=\"d-flex justify-content-center mb-3\">\r\n        <div className=\"spinner-border\" role=\"status\"></div>\r\n      </div>\r\n    );\r\n  if (error) {\r\n    console.log(error);\r\n    return <h4>ERROR</h4>;\r\n  }\r\n  if (!data) return <h4>No People found</h4>;\r\n\r\n  return (\r\n    <Fragment>\r\n      {data.peoplePage.map((person: any) => (\r\n        <div key={person.url}>\r\n          <PersonItem\r\n            name={person.name}\r\n            onClick={() => setShowDetails(person.name)}\r\n            activeItem={showDetails}\r\n          />\r\n          {person.name === showDetails && (\r\n            <PersonDetails\r\n              id={getPersonID(person.url)}\r\n              // person={person}\r\n              // // height={person.height}\r\n              // // mass={person.mass}\r\n              // // gender={person.gender}\r\n              // homeworld={person.homeworld.name}\r\n            />\r\n          )}\r\n        </div>\r\n      ))}\r\n    </Fragment>\r\n  );\r\n};\r\n","import React, { Fragment, useState } from \"react\";\r\nimport { gql, useQuery } from \"@apollo/client\";\r\nimport { PersonItem } from \"./PersonItem\";\r\nimport { PersonDetails } from \"./PersonDetails\";\r\n\r\nconst PEOPLE_SEARCH = gql`\r\n  query PeopleSearch($search: String!) {\r\n    peopleSearch(search: $search) {\r\n      url\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nconst getPersonID = (personURL: String) => {\r\n  let splitPersonURL = personURL.split(\"/\");\r\n  return parseInt(splitPersonURL[splitPersonURL.length - 2]);\r\n};\r\n\r\ninterface PeopleSearchProps {\r\n  search: String;\r\n}\r\n\r\nexport const PeopleSearch: React.FC<PeopleSearchProps> = ({ search }) => {\r\n  const [showDetails, setShowDetails] = useState();\r\n\r\n  const { loading, error, data } = useQuery<any>(PEOPLE_SEARCH, {\r\n    variables: { search },\r\n  });\r\n\r\n  if (loading)\r\n    return (\r\n      <div className=\"d-flex justify-content-center mb-3\">\r\n        <div className=\"spinner-border\" role=\"status\"></div>\r\n      </div>\r\n    );\r\n  if (error) {\r\n    console.log(error);\r\n    return <h4>ERROR</h4>;\r\n  }\r\n  if (!data) return <h4>No People found</h4>;\r\n\r\n  return (\r\n    <Fragment>\r\n      {data.peopleSearch.map((person: any) => (\r\n        <div key={person.url}>\r\n          <PersonItem\r\n            name={person.name}\r\n            onClick={() => setShowDetails(person.name)}\r\n            activeItem={showDetails}\r\n          />\r\n          {person.name === showDetails && (\r\n            <PersonDetails id={getPersonID(person.url)} />\r\n          )}\r\n        </div>\r\n      ))}\r\n    </Fragment>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst PageSelect = styled.div`\r\n  button:hover {\r\n    color: #000;\r\n    background: #b4b4b4;\r\n  }\r\n`;\r\n\r\ninterface PaginationProps {\r\n  setSelectedPage: any;\r\n}\r\n\r\nexport const Pagination: React.FC<PaginationProps> = ({ setSelectedPage }) => {\r\n  //const [selectedPage, setSelectedPage] = useState(currentPage);\r\n\r\n  const onPageChange = (page: number) => {\r\n    setSelectedPage(page);\r\n  };\r\n\r\n  return (\r\n    <PageSelect>\r\n      <div className=\"mt-4\">\r\n        <ul className=\"pagination justify-content-center\">\r\n          <li className=\"page-item\">\r\n            <button className=\"page-link\" onClick={() => onPageChange(1)}>\r\n              1\r\n            </button>\r\n          </li>\r\n          <li className=\"page-item\">\r\n            <button className=\"page-link\" onClick={() => onPageChange(2)}>\r\n              2\r\n            </button>\r\n          </li>\r\n          <li className=\"page-item\">\r\n            <button className=\"page-link\" onClick={() => onPageChange(3)}>\r\n              3\r\n            </button>\r\n          </li>\r\n          <li className=\"page-item\">\r\n            <button className=\"page-link\" onClick={() => onPageChange(4)}>\r\n              4\r\n            </button>\r\n          </li>\r\n          <li className=\"page-item\">\r\n            <button className=\"page-link\" onClick={() => onPageChange(5)}>\r\n              5\r\n            </button>\r\n          </li>\r\n          <li className=\"page-item\">\r\n            <button className=\"page-link\" onClick={() => onPageChange(6)}>\r\n              6\r\n            </button>\r\n          </li>\r\n          <li className=\"page-item\">\r\n            <button className=\"page-link\" onClick={() => onPageChange(7)}>\r\n              7\r\n            </button>\r\n          </li>\r\n          <li className=\"page-item\">\r\n            <button className=\"page-link\" onClick={() => onPageChange(8)}>\r\n              8\r\n            </button>\r\n          </li>\r\n          <li className=\"page-item\">\r\n            <button className=\"page-link\" onClick={() => onPageChange(9)}>\r\n              9\r\n            </button>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </PageSelect>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\ninterface SearchProps {\r\n  setSearchInput: any;\r\n}\r\n\r\nexport const Search: React.FC<SearchProps> = ({ setSearchInput }) => {\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"text\"\r\n        className=\"form-control\"\r\n        placeholder=\"Search\"\r\n        aria-label=\"Search\"\r\n        onChange={(e) => setSearchInput(e.target.value)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import styled, { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle``;\r\n\r\nexport const Title = styled.h1`\r\n  font-family: \"Zen Dots\";\r\n  color: #ffe81f;\r\n  margin: 10px 20px 20px;\r\n`;\r\n","import { useState } from \"react\";\nimport { PeopleList } from \"./components/PeopleList\";\nimport { PeopleSearch } from \"./components/PeopleSearch\";\nimport { Pagination } from \"./components/Pagination\";\nimport { Search } from \"./components/Search\";\nimport { GlobalStyle, Title } from \"./App.styles\";\n\nconst App = () => {\n  const [selectedPage, setSelectedPage] = useState(1);\n  const [searchInput, setSearchInput] = useState(\"\");\n\n  return (\n    <>\n      <GlobalStyle />\n      <div className=\"container\">\n        <div className=\"d-flex justify-content-between align-items-center\">\n          <Title>People of Star Wars</Title>\n          <Search setSearchInput={setSearchInput} />\n        </div>\n        {searchInput === \"\" ? (\n          <>\n            <PeopleList page={selectedPage} />\n            <Pagination setSelectedPage={setSelectedPage} />\n          </>\n        ) : (\n          <PeopleSearch search={searchInput} />\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import { InMemoryCache } from \"@apollo/client\";\r\n\r\nexport const cache: InMemoryCache = new InMemoryCache({});\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport {\n  ApolloClient,\n  NormalizedCacheObject,\n  ApolloProvider,\n} from \"@apollo/client\";\nimport { cache } from \"./cache\";\n\nconst client: ApolloClient<NormalizedCacheObject> = new ApolloClient({\n  cache,\n  uri: \"/graphql\",\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}